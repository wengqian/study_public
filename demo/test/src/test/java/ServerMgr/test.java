package ServerMgr;import org.junit.Test;import java.util.ArrayList;import java.util.List;/** * Created by wengqian on 2017/4/13. */public class test {    /**     * 随机获取服务器     * */    @Test    public void test01() throws Exception {        List<ServerInfo> list = new ArrayList<ServerInfo>();        list.add(new ServerInfo("10.94.0.1", 8000));        list.add(new ServerInfo("10.94.0.2", 8000));        list.add(new ServerInfo("10.94.0.3", 8000));        list.add(new ServerInfo("10.94.0.4", 8000));        ServerMgr serverMgr = new ServerMgr(list);        // 第1步，随机获取一个服务器        ServerInfo serverInfo = serverMgr.getServerByRandom();        if (serverInfo == null) {            // 第2步，强制获取一个可用服务器            serverInfo = serverMgr.getServerByForce();            if (serverInfo == null) {                throw new Exception("无可用服务器");            }        }        System.out.println(serverInfo.toString());        // 请求内容        String requestMsg = "/get/1";        do {            try {                // 发起请求，requestServer()函数由业务方实现                String res = requestServer(requestMsg, serverInfo.getIp(), serverInfo.getPort());                // 请求成功,发生故障的服务器恢复服务,将其重置为可用状态                if (!serverInfo.isValid()) {                    serverMgr.validateServer(serverInfo);                }                System.out.println("请求成功:" + res);                return;            } catch (Exception e) {                System.out.println("服务器不可用:" + serverInfo);                // 服务器无法访问, 将服务器标记为不可用                serverMgr.invalidateServer(serverInfo);            }            //  第2步强制获取可用的服务器            serverInfo = serverMgr.getServerByForce();            if (serverInfo == null) {                throw new Exception("无可用的服务器");            }        } while (true);    }    /**     *模拟调用方法     * */    private static String requestServer(String requestMsg, String ip, int port) {        return "success";    }}